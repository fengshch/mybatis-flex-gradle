/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.3/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
}

group GROUP
version VERSION

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'com.mybatis-flex:mybatis-flex-codegen:1.5.7'

    implementation "gradle.plugin.org.flywaydb:gradle-plugin-publishing:9.21.2"

    implementation 'com.mysql:mysql-connector-j:8.1.0'

    implementation("com.zaxxer:HikariCP:5.0.1")
//    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
//    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'

    implementation("org.yaml:snakeyaml:2.1")
//    implementation("org.yaml:snakeyaml:1.33")

    implementation("org.freemarker:freemarker:2.3.32")

    implementation 'org.apache.commons:commons-lang3:3.13.0'

    compileOnly("org.projectlombok:lombok:1.18.28")
    testCompileOnly("org.projectlombok:lombok:1.18.28")

//    annotationProcessor(libs.lombok)
    annotationProcessor("org.projectlombok:lombok:1.18.28")
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'com.github.fengshch.mybatis-flex-gradle-plugin'
            implementationClass = 'com.github.fengshch.mybatis.MybatisFlexGradlePlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
