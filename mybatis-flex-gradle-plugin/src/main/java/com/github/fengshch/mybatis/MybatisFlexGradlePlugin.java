/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.fengshch.mybatis;

import com.github.fengshch.mybatis.config.DataSourceConfigBuilder;
import com.github.fengshch.mybatis.config.GlobalConfigBuilder;
import com.github.fengshch.mybatis.ext.MyBatisExtension;
import com.github.fengshch.mybatis.tasks.*;
import org.apache.commons.lang3.StringUtils;
import org.flywaydb.gradle.FlywayExtension;
import org.flywaydb.gradle.FlywayPlugin;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.plugins.JavaBasePlugin;
import org.gradle.api.plugins.JavaPluginExtension;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.TaskProvider;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

/**
 * A simple 'hello world' plugin.
 */
public class MybatisFlexGradlePlugin implements Plugin<Project> {
    public void apply(Project project) {
        project.getPlugins().apply(JavaBasePlugin.class);

        MyBatisExtension myBatisExtension = project.getExtensions().create("mybatis", MyBatisExtension.class);
         project.getExtensions().create("flyway", FlywayExtension.class);

        project.afterEvaluate(p -> {
            System.out.println("mybatis: " + myBatisExtension.getConfigurations().getNames());
            myBatisExtension.getConfigurations().forEach(globalConfigBuilder -> {
                if (globalConfigBuilder.getDataSourceConfig() == null) {
                    try {
                        globalConfigBuilder.setDataSourceConfig(configDatasource(project, globalConfigBuilder.getName()));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
                createGenerateTask(project, globalConfigBuilder);

                project.getPlugins().withType(JavaBasePlugin.class, javaBasePlugin -> {
                    JavaPluginExtension javaPluginExtension = project.getExtensions().getByType(JavaPluginExtension.class);
                    SourceSetContainer sourceSets = javaPluginExtension.getSourceSets();

                    if (sourceSets.getNames().contains("main")) {
                        SourceSet sourceSet = sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME);
                        String batisSourceSetJavaDir = globalConfigBuilder.getPackageConfig().getSourceDir();
                        sourceSet.getJava().srcDir(batisSourceSetJavaDir);
                    }
                });

                FlywayExtension flywayExtension = globalConfigBuilder.getFlywayConfigBuilder().build(project);
                applyFlywayTask(project, globalConfigBuilder, flywayExtension);
            });
        });
    }

    private void createGenerateTask(Project project, GlobalConfigBuilder globalConfigBuilder) {
        String name = globalConfigBuilder.getName().equals("main") ? "" : globalConfigBuilder.getName();
        String taskName = "mybatis" + StringUtils.capitalize(name) + "Generate";
        project.getTasks().register(taskName, MyBatisGenerateTask.class, globalConfigBuilder);
    }

    @SuppressWarnings("unchecked")
    private DataSourceConfigBuilder configDatasource(Project project, String configName) throws IOException {
        DataSourceConfigBuilder dataSourceConfig = new DataSourceConfigBuilder();


        Map<String, String> pathsMap = new HashMap<>();
        pathsMap.put("src/main/resources/mybatis.yml", "mybatis");
        pathsMap.put("src/main/resources/application-dev.yml", "spring");
        pathsMap.put("src/main/resources/application.yml", "spring");
        pathsMap.put("src/main/resources/application-test.yml", "spring");
        pathsMap.put("src/main/resources/mybatis.properties", "mybatis.datasource");
        pathsMap.put("src/main/resources/application.properties", "spring.datasource");

        for (Map.Entry<String, String> entry : pathsMap.entrySet()) {
            File configFile = project.file(entry.getKey());

            if (configFile.exists()) {
                if (entry.getKey().endsWith(".yml")) {
                    Map<String, Object> props = loadYaml(configFile);
                    if (props == null)
                        continue;
                    Map<String, Object> mainConfig = (Map<String, Object>) props.get(entry.getValue());
                    if (mainConfig == null)
                        continue;
                    Map<String, Object> datasource = (Map<String, Object>) mainConfig.get("datasource");
                    if (datasource == null)
                        continue;
                    if ("main".equals(configName)) {
                        setConfigFromMap(dataSourceConfig, datasource);
                    } else {
                        Map<String, Object> datasourceMap = (Map<String, Object>) datasource.get(configName);
                        setConfigFromMap(dataSourceConfig, datasourceMap);
                    }
                } else {
                    String prefix = "main".equals(configName) ? entry.getValue() : entry.getValue() + "." + configName;
                    Properties properties = loadProperties(configFile);
                    setConfigFromProperties(dataSourceConfig, properties, prefix);
                }
                break; // exit the loop once the first matching config file is found and processed
            }
        }
        return dataSourceConfig;
    }

    private HashMap<String, Object> loadYaml(File file) {
        Yaml yaml = new Yaml();
        try (FileInputStream fis = new FileInputStream(file)) {
            return yaml.load(fis);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private Properties loadProperties(File file) throws IOException {
        Properties properties = new Properties();
        try (FileInputStream fis = new FileInputStream(file)) {
            properties.load(fis);
        }
        return properties;
    }

    private void setConfigFromMap(DataSourceConfigBuilder config, Map<String, Object> datasource) {
        config.setDriverClassName(String.valueOf(datasource.getOrDefault("driverClassName", datasource.get("driver-class-name"))));
        config.setUrl(String.valueOf(datasource.get("url")));
        config.setUsername(String.valueOf(datasource.get("username")));
        config.setPassword(String.valueOf(datasource.get("password")));
    }

    private void setConfigFromProperties(DataSourceConfigBuilder config, Properties properties, String prefix) {
        config.setDriverClassName(properties.getProperty(prefix + ".driverClassName", properties.getProperty(prefix + ".driver-class-name")));
        config.setUrl(properties.getProperty(prefix + ".url"));
        config.setUsername(properties.getProperty(prefix + ".username"));
        config.setPassword(properties.getProperty(prefix + ".password"));
    }

    private void applyFlywayTask(Project project, GlobalConfigBuilder globalConfigBuilder, FlywayExtension flywayExtension) {
        String taskNamePri = globalConfigBuilder.getName().equals("main") ? "flyway" : globalConfigBuilder.getName();
        project.getTasks().register(taskNamePri + "Clean", CustomFlywayCleanTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Baseline", CustomFlywayBaselineTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Migrate", CustomFlywayMigrateTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Undo", CustomFlywayUndoTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Validate", CustomFlywayValidateTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Info", CustomFlywayInfoTask.class, flywayExtension);
        project.getTasks().create(taskNamePri + "Repair", CustomFlywayRepairTask.class, flywayExtension);
    }
}
