/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.fengshch.mybatis;

import com.github.fengshch.mybatis.config.DataSourceConfigBuilder;
import com.github.fengshch.mybatis.config.GlobalConfigBuilder;
import com.github.fengshch.mybatis.ext.MyBatisExtension;
import com.github.fengshch.mybatis.tasks.*;
import org.apache.commons.lang3.StringUtils;
import org.flywaydb.gradle.FlywayExtension;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.plugins.JavaBasePlugin;
import org.gradle.api.plugins.JavaPluginExtension;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

/**
 * A simple 'hello world' plugin.
 */
public class MyBatisFlexGradlePlugin implements Plugin<Project> {
    public void apply(Project project) {
        project.getPlugins().apply(JavaBasePlugin.class);

        MyBatisExtension myBatisExtension = project.getExtensions().create("mybatis", MyBatisExtension.class);
        project.getExtensions().create("flyway", FlywayExtension.class);

        project.afterEvaluate(p -> {
            System.out.println("mybatis: " + myBatisExtension.getConfigurations().getNames());
            myBatisExtension.getConfigurations().forEach(globalConfigBuilder -> {
                configDatasource(project, globalConfigBuilder);
                createGenerateTask(project, globalConfigBuilder);

                project.getPlugins().withType(JavaBasePlugin.class, javaBasePlugin -> {
                    JavaPluginExtension javaPluginExtension = project.getExtensions().getByType(JavaPluginExtension.class);
                    SourceSetContainer sourceSets = javaPluginExtension.getSourceSets();

                    if (sourceSets.getNames().contains("main")) {
                        SourceSet sourceSet = sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME);
                        String batisSourceSetJavaDir = globalConfigBuilder.getPackageConfigBuilder().getSourceDir();
                        if(batisSourceSetJavaDir != null && !batisSourceSetJavaDir.equals("src/main/java")) {
                            sourceSet.getJava().srcDir(batisSourceSetJavaDir);
                        }
                    }
                });

                FlywayExtension flywayExtension = globalConfigBuilder.getFlywayExtension();
                applyFlywayTask(project, globalConfigBuilder, flywayExtension);
            });
        });
    }

    private void createGenerateTask(Project project, GlobalConfigBuilder globalConfigBuilder) {
        String name = globalConfigBuilder.getName().equals("main") ? "" : globalConfigBuilder.getName();
        String taskName = "mybatis%sGenerate".formatted(StringUtils.capitalize(name));
        project.getTasks().register(taskName, MyBatisGenerateTask.class, globalConfigBuilder);
    }


    @SuppressWarnings("unchecked")
    private void configDatasource(Project project, GlobalConfigBuilder globalConfigBuilder) {
        String profile = getProfile(project);
        DataSourceConfigBuilder dataSourceConfig = globalConfigBuilder.getDataSourceConfigBuilder();
        File configFile = getConfigFile(project, profile);

        Map<String, Object> datasource = readDataSourceConfig(configFile);
        datasource = configH2Datasource(datasource, project);
        setConfigFromMap(dataSourceConfig, "main".equals(globalConfigBuilder.getName()) ? Objects.requireNonNull(datasource) : (Map<String, Object>) Objects.requireNonNull(datasource).get(globalConfigBuilder.getName()));
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> readDataSourceConfig(File configFile) {
        try (FileInputStream yamlStream = new FileInputStream(configFile)) {
            Yaml yaml = new Yaml();
            Iterable<Object> documents = yaml.loadAll(yamlStream);
            for (Object document : documents) {
                Map<String, Object> props = (Map<String, Object>) document;
                if (props != null) {
                    Map<String, Object> spring = (Map<String, Object>) props.get("spring");
                    if (spring != null) {
                        Map<String, Object> datasource = (Map<String, Object>) spring.get("datasource");
                        if (datasource != null) {
                            return datasource;
                        }
                    }
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("Failed to read YAML file", e);
        }
        return null;
    }

    private String getProfile(Project project) {
        if (project.hasProperty("profile")) return (String) project.property("profile");
        String activeProfile = getActiveProfile(project);
        if (activeProfile != null) return activeProfile;
        return System.getenv("PROFILE") != null ? System.getenv("PROFILE") : "default";
    }

    private File getConfigFile(Project project, String profile) {
        File flexConfigFile = project.file("src/main/resources/mybatis-flex.yml");
        if (flexConfigFile.exists()) return flexConfigFile;

        Map<String, String> pathsMap = getStringStringMap();
        return project.file(pathsMap.get(profile));
    }

    @NotNull
    private static Map<String, String> getStringStringMap() {
        Map<String, String> pathsMap = new HashMap<>();
        pathsMap.put("default", "src/main/resources/application.yml");
        pathsMap.put("dev", "src/main/resources/application-dev.yml");
        pathsMap.put("test", "src/main/resources/application-test.yml");
        return pathsMap;
    }

//    private Iterable<Object> loadYaml(File file) {
//        Yaml yaml = new Yaml();
//        try (FileInputStream fis = new FileInputStream(file)) {
//            return yaml.loadAll(fis);
//        } catch (Exception e) {
//            throw new RuntimeException(e);
//        }
//    }

    private Properties loadProperties(File file) throws IOException {
        Properties properties = new Properties();
        try (FileInputStream fis = new FileInputStream(file)) {
            properties.load(fis);
        }
        return properties;
    }

    private void setConfigFromMap(DataSourceConfigBuilder config, Map<String, Object> datasource) {
        config.setDriverClassName(String.valueOf(datasource.getOrDefault("driverClassName", datasource.get("driver-class-name"))));
        config.setUrl(String.valueOf(datasource.get("url")));
        config.setUsername(String.valueOf(datasource.get("username")));
        config.setPassword(String.valueOf(datasource.get("password")));
    }

    private void setConfigFromProperties(DataSourceConfigBuilder config, Properties properties, String prefix) {
        config.setDriverClassName(properties.getProperty(prefix + ".driverClassName", properties.getProperty(prefix + ".driver-class-name")));
        config.setUrl(properties.getProperty(prefix + ".url"));
        config.setUsername(properties.getProperty(prefix + ".username"));
        config.setPassword(properties.getProperty(prefix + ".password"));
    }

    private void applyFlywayTask(Project project, GlobalConfigBuilder globalConfigBuilder, FlywayExtension
            flywayExtension) {
        String taskNamePri = globalConfigBuilder.getName().equals("main") ? "flyway" : globalConfigBuilder.getName();
        project.getTasks().register(taskNamePri + "Clean", CustomFlywayCleanTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Baseline", CustomFlywayBaselineTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Migrate", CustomFlywayMigrateTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Undo", CustomFlywayUndoTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Validate", CustomFlywayValidateTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Info", CustomFlywayInfoTask.class, flywayExtension);
        project.getTasks().register(taskNamePri + "Repair", CustomFlywayRepairTask.class, flywayExtension);
    }

    @SuppressWarnings("unchecked")
    private String getActiveProfile(Project project) {
        File yamlFile = project.file("src/main/resources/application.yml");
        if (yamlFile.exists()) {
            try (FileInputStream fis = new FileInputStream(yamlFile)) {
                Yaml yaml = new Yaml();
                Iterable<Object> documents = yaml.loadAll(fis);
                for (Object document : documents) {
                    Map<String, Object> props = (Map<String, Object>) document;
                    if (props != null) {
                        Map<String, Object> spring = (Map<String, Object>) props.get("spring");
                        if (spring != null) {
                            Map<String, Object> profiles = (Map<String, Object>) spring.get("profiles");
                            if (profiles != null) {
                                return (String) profiles.get("active");
                            }
                        }
                    }
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }

        }
        return null;
    }

    private Map<String, Object> configH2Datasource(Map<String, Object> datasource, Project project) {
        if (datasource == null)
            return null;
        String url = (String) datasource.get("url");
        if (url.contains("jdbc:h2:file:./")) {
            String path = project.getProjectDir().getAbsolutePath();
            url = url.replace("jdbc:h2:file:./", "jdbc:h2:file:" + path + "/");
        }
        if (url.contains("jdbc:h2:file:../")) {
            String path = project.getProjectDir().getParentFile().getAbsolutePath();
            url = url.replace("jdbc:h2:file:../", "jdbc:h2:file:" + path + "/");
        }
        datasource.put("url", url);
        return datasource;
    }
}
